# coding: utf-8

"""
    Purplship API

     ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.6.2`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.    # noqa: E501

    OpenAPI spec version: 2021.6.2
    Contact: hello@purplship.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'postal_code': 'str',
        'city': 'str',
        'federal_tax_id': 'str',
        'state_tax_id': 'str',
        'person_name': 'str',
        'company_name': 'str',
        'country_code': 'str',
        'email': 'str',
        'phone_number': 'str',
        'state_code': 'str',
        'suburb': 'str',
        'residential': 'bool',
        'address_line1': 'str',
        'address_line2': 'str',
        'validate_location': 'bool',
        'validation': 'AddressValidation'
    }

    attribute_map = {
        'id': 'id',
        'postal_code': 'postal_code',
        'city': 'city',
        'federal_tax_id': 'federal_tax_id',
        'state_tax_id': 'state_tax_id',
        'person_name': 'person_name',
        'company_name': 'company_name',
        'country_code': 'country_code',
        'email': 'email',
        'phone_number': 'phone_number',
        'state_code': 'state_code',
        'suburb': 'suburb',
        'residential': 'residential',
        'address_line1': 'address_line1',
        'address_line2': 'address_line2',
        'validate_location': 'validate_location',
        'validation': 'validation'
    }

    def __init__(self, id=None, postal_code=None, city=None, federal_tax_id=None, state_tax_id=None, person_name=None, company_name=None, country_code=None, email=None, phone_number=None, state_code=None, suburb=None, residential=False, address_line1=None, address_line2=None, validate_location=False, validation=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._postal_code = None
        self._city = None
        self._federal_tax_id = None
        self._state_tax_id = None
        self._person_name = None
        self._company_name = None
        self._country_code = None
        self._email = None
        self._phone_number = None
        self._state_code = None
        self._suburb = None
        self._residential = None
        self._address_line1 = None
        self._address_line2 = None
        self._validate_location = None
        self._validation = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if postal_code is not None:
            self.postal_code = postal_code
        if city is not None:
            self.city = city
        if federal_tax_id is not None:
            self.federal_tax_id = federal_tax_id
        if state_tax_id is not None:
            self.state_tax_id = state_tax_id
        if person_name is not None:
            self.person_name = person_name
        if company_name is not None:
            self.company_name = company_name
        self.country_code = country_code
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if state_code is not None:
            self.state_code = state_code
        if suburb is not None:
            self.suburb = suburb
        if residential is not None:
            self.residential = residential
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if validate_location is not None:
            self.validate_location = validate_location
        if validation is not None:
            self.validation = validation

    @property
    def id(self):
        """Gets the id of this Address.  # noqa: E501

        A unique identifier  # noqa: E501

        :return: The id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Address.

        A unique identifier  # noqa: E501

        :param id: The id of this Address.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501

         The address postal code  **(required for shipment purchase)**   # noqa: E501

        :return: The postal_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

         The address postal code  **(required for shipment purchase)**   # noqa: E501

        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501

         The address city.  **(required for shipment purchase)**   # noqa: E501

        :return: The city of this Address.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

         The address city.  **(required for shipment purchase)**   # noqa: E501

        :param city: The city of this Address.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def federal_tax_id(self):
        """Gets the federal_tax_id of this Address.  # noqa: E501

        The party frederal tax id  # noqa: E501

        :return: The federal_tax_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._federal_tax_id

    @federal_tax_id.setter
    def federal_tax_id(self, federal_tax_id):
        """Sets the federal_tax_id of this Address.

        The party frederal tax id  # noqa: E501

        :param federal_tax_id: The federal_tax_id of this Address.  # noqa: E501
        :type: str
        """

        self._federal_tax_id = federal_tax_id

    @property
    def state_tax_id(self):
        """Gets the state_tax_id of this Address.  # noqa: E501

        The party state id  # noqa: E501

        :return: The state_tax_id of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state_tax_id

    @state_tax_id.setter
    def state_tax_id(self, state_tax_id):
        """Sets the state_tax_id of this Address.

        The party state id  # noqa: E501

        :param state_tax_id: The state_tax_id of this Address.  # noqa: E501
        :type: str
        """

        self._state_tax_id = state_tax_id

    @property
    def person_name(self):
        """Gets the person_name of this Address.  # noqa: E501

         attention to  **(required for shipment purchase)**   # noqa: E501

        :return: The person_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._person_name

    @person_name.setter
    def person_name(self, person_name):
        """Sets the person_name of this Address.

         attention to  **(required for shipment purchase)**   # noqa: E501

        :param person_name: The person_name of this Address.  # noqa: E501
        :type: str
        """

        self._person_name = person_name

    @property
    def company_name(self):
        """Gets the company_name of this Address.  # noqa: E501

        The company name if the party is a company  # noqa: E501

        :return: The company_name of this Address.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Address.

        The company name if the party is a company  # noqa: E501

        :param company_name: The company_name of this Address.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def country_code(self):
        """Gets the country_code of this Address.  # noqa: E501

        The address country code  # noqa: E501

        :return: The country_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.

        The address country code  # noqa: E501

        :param country_code: The country_code of this Address.  # noqa: E501
        :type: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501
        allowed_values = ["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AN", "AO", "AR", "AS", "AT", "AU", "AW", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BM", "BN", "BO", "BR", "BS", "BT", "BW", "BY", "BZ", "CA", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GT", "GU", "GW", "GY", "HK", "HN", "HR", "HT", "HU", "IC", "ID", "IE", "IL", "IN", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KV", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PR", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SY", "SZ", "TC", "TD", "TG", "TH", "TJ", "TL", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WS", "XB", "XC", "XE", "XM", "XN", "XS", "XY", "YE", "YT", "ZA", "ZM", "ZW"]  # noqa: E501
        if country_code not in allowed_values:
            raise ValueError(
                "Invalid value for `country_code` ({0}), must be one of {1}"  # noqa: E501
                .format(country_code, allowed_values)
            )

        self._country_code = country_code

    @property
    def email(self):
        """Gets the email of this Address.  # noqa: E501

        The party email  # noqa: E501

        :return: The email of this Address.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Address.

        The party email  # noqa: E501

        :param email: The email of this Address.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this Address.  # noqa: E501

        The party phone number.  # noqa: E501

        :return: The phone_number of this Address.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Address.

        The party phone number.  # noqa: E501

        :param phone_number: The phone_number of this Address.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def state_code(self):
        """Gets the state_code of this Address.  # noqa: E501

        The address state code  # noqa: E501

        :return: The state_code of this Address.  # noqa: E501
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this Address.

        The address state code  # noqa: E501

        :param state_code: The state_code of this Address.  # noqa: E501
        :type: str
        """

        self._state_code = state_code

    @property
    def suburb(self):
        """Gets the suburb of this Address.  # noqa: E501

        The address suburb if known  # noqa: E501

        :return: The suburb of this Address.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this Address.

        The address suburb if known  # noqa: E501

        :param suburb: The suburb of this Address.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def residential(self):
        """Gets the residential of this Address.  # noqa: E501

        Indicate if the address is residential or commercial (enterprise)  # noqa: E501

        :return: The residential of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._residential

    @residential.setter
    def residential(self, residential):
        """Sets the residential of this Address.

        Indicate if the address is residential or commercial (enterprise)  # noqa: E501

        :param residential: The residential of this Address.  # noqa: E501
        :type: bool
        """

        self._residential = residential

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.  # noqa: E501

         The address line with street number <br/> **(required for shipment purchase)**   # noqa: E501

        :return: The address_line1 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

         The address line with street number <br/> **(required for shipment purchase)**   # noqa: E501

        :param address_line1: The address_line1 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.  # noqa: E501

        The address line with suite number  # noqa: E501

        :return: The address_line2 of this Address.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        The address line with suite number  # noqa: E501

        :param address_line2: The address_line2 of this Address.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def validate_location(self):
        """Gets the validate_location of this Address.  # noqa: E501

        Indicate if the address should be validated  # noqa: E501

        :return: The validate_location of this Address.  # noqa: E501
        :rtype: bool
        """
        return self._validate_location

    @validate_location.setter
    def validate_location(self, validate_location):
        """Sets the validate_location of this Address.

        Indicate if the address should be validated  # noqa: E501

        :param validate_location: The validate_location of this Address.  # noqa: E501
        :type: bool
        """

        self._validate_location = validate_location

    @property
    def validation(self):
        """Gets the validation of this Address.  # noqa: E501


        :return: The validation of this Address.  # noqa: E501
        :rtype: AddressValidation
        """
        return self._validation

    @validation.setter
    def validation(self, validation):
        """Sets the validation of this Address.


        :param validation: The validation of this Address.  # noqa: E501
        :type: AddressValidation
        """

        self._validation = validation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
