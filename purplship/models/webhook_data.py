# coding: utf-8

"""
    Purplship API

     ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.6.2`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.    # noqa: E501

    OpenAPI spec version: 2021.6.2
    Contact: hello@purplship.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhookData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'description': 'str',
        'enabled_events': 'list[str]',
        'test_mode': 'bool',
        'disabled': 'bool'
    }

    attribute_map = {
        'url': 'url',
        'description': 'description',
        'enabled_events': 'enabled_events',
        'test_mode': 'test_mode',
        'disabled': 'disabled'
    }

    def __init__(self, url=None, description=None, enabled_events=None, test_mode=None, disabled=None):  # noqa: E501
        """WebhookData - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._description = None
        self._enabled_events = None
        self._test_mode = None
        self._disabled = None
        self.discriminator = None
        self.url = url
        if description is not None:
            self.description = description
        self.enabled_events = enabled_events
        self.test_mode = test_mode
        if disabled is not None:
            self.disabled = disabled

    @property
    def url(self):
        """Gets the url of this WebhookData.  # noqa: E501

        The URL of the webhook endpoint.  # noqa: E501

        :return: The url of this WebhookData.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookData.

        The URL of the webhook endpoint.  # noqa: E501

        :param url: The url of this WebhookData.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def description(self):
        """Gets the description of this WebhookData.  # noqa: E501

        An optional description of what the webhook is used for.  # noqa: E501

        :return: The description of this WebhookData.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebhookData.

        An optional description of what the webhook is used for.  # noqa: E501

        :param description: The description of this WebhookData.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled_events(self):
        """Gets the enabled_events of this WebhookData.  # noqa: E501

        The list of events to enable for this endpoint.  # noqa: E501

        :return: The enabled_events of this WebhookData.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_events

    @enabled_events.setter
    def enabled_events(self, enabled_events):
        """Sets the enabled_events of this WebhookData.

        The list of events to enable for this endpoint.  # noqa: E501

        :param enabled_events: The enabled_events of this WebhookData.  # noqa: E501
        :type: list[str]
        """
        if enabled_events is None:
            raise ValueError("Invalid value for `enabled_events`, must not be `None`")  # noqa: E501
        allowed_values = ["all", "shipment.purchased", "shipment.cancelled", "shipment.fulfilled", "tracker.created", "tracker.updated"]  # noqa: E501
        if not set(enabled_events).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enabled_events` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(enabled_events) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._enabled_events = enabled_events

    @property
    def test_mode(self):
        """Gets the test_mode of this WebhookData.  # noqa: E501

        Specified whether it was created with a carrier in test mode  # noqa: E501

        :return: The test_mode of this WebhookData.  # noqa: E501
        :rtype: bool
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this WebhookData.

        Specified whether it was created with a carrier in test mode  # noqa: E501

        :param test_mode: The test_mode of this WebhookData.  # noqa: E501
        :type: bool
        """
        if test_mode is None:
            raise ValueError("Invalid value for `test_mode`, must not be `None`")  # noqa: E501

        self._test_mode = test_mode

    @property
    def disabled(self):
        """Gets the disabled of this WebhookData.  # noqa: E501

        Indicates that the webhook is disabled  # noqa: E501

        :return: The disabled of this WebhookData.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this WebhookData.

        Indicates that the webhook is disabled  # noqa: E501

        :param disabled: The disabled of this WebhookData.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
