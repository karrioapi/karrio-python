# coding: utf-8

"""
    Purplship API

     ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.6.2`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.    # noqa: E501

    OpenAPI spec version: 2021.6.2
    Contact: hello@purplship.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TrackingStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'carrier_name': 'str',
        'carrier_id': 'str',
        'tracking_number': 'str',
        'events': 'list[TrackingEvent]',
        'delivered': 'bool',
        'test_mode': 'bool',
        'pending': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'carrier_name': 'carrier_name',
        'carrier_id': 'carrier_id',
        'tracking_number': 'tracking_number',
        'events': 'events',
        'delivered': 'delivered',
        'test_mode': 'test_mode',
        'pending': 'pending'
    }

    def __init__(self, id=None, carrier_name=None, carrier_id=None, tracking_number=None, events=None, delivered=None, test_mode=None, pending=None):  # noqa: E501
        """TrackingStatus - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._carrier_name = None
        self._carrier_id = None
        self._tracking_number = None
        self._events = None
        self._delivered = None
        self._test_mode = None
        self._pending = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.carrier_name = carrier_name
        self.carrier_id = carrier_id
        self.tracking_number = tracking_number
        if events is not None:
            self.events = events
        if delivered is not None:
            self.delivered = delivered
        self.test_mode = test_mode
        if pending is not None:
            self.pending = pending

    @property
    def id(self):
        """Gets the id of this TrackingStatus.  # noqa: E501

        A unique identifier  # noqa: E501

        :return: The id of this TrackingStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackingStatus.

        A unique identifier  # noqa: E501

        :param id: The id of this TrackingStatus.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def carrier_name(self):
        """Gets the carrier_name of this TrackingStatus.  # noqa: E501

        The tracking carrier  # noqa: E501

        :return: The carrier_name of this TrackingStatus.  # noqa: E501
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this TrackingStatus.

        The tracking carrier  # noqa: E501

        :param carrier_name: The carrier_name of this TrackingStatus.  # noqa: E501
        :type: str
        """
        if carrier_name is None:
            raise ValueError("Invalid value for `carrier_name`, must not be `None`")  # noqa: E501

        self._carrier_name = carrier_name

    @property
    def carrier_id(self):
        """Gets the carrier_id of this TrackingStatus.  # noqa: E501

        The tracking carrier configured identifier  # noqa: E501

        :return: The carrier_id of this TrackingStatus.  # noqa: E501
        :rtype: str
        """
        return self._carrier_id

    @carrier_id.setter
    def carrier_id(self, carrier_id):
        """Sets the carrier_id of this TrackingStatus.

        The tracking carrier configured identifier  # noqa: E501

        :param carrier_id: The carrier_id of this TrackingStatus.  # noqa: E501
        :type: str
        """
        if carrier_id is None:
            raise ValueError("Invalid value for `carrier_id`, must not be `None`")  # noqa: E501

        self._carrier_id = carrier_id

    @property
    def tracking_number(self):
        """Gets the tracking_number of this TrackingStatus.  # noqa: E501

        The shipment tracking number  # noqa: E501

        :return: The tracking_number of this TrackingStatus.  # noqa: E501
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this TrackingStatus.

        The shipment tracking number  # noqa: E501

        :param tracking_number: The tracking_number of this TrackingStatus.  # noqa: E501
        :type: str
        """
        if tracking_number is None:
            raise ValueError("Invalid value for `tracking_number`, must not be `None`")  # noqa: E501

        self._tracking_number = tracking_number

    @property
    def events(self):
        """Gets the events of this TrackingStatus.  # noqa: E501

        The tracking details events  # noqa: E501

        :return: The events of this TrackingStatus.  # noqa: E501
        :rtype: list[TrackingEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this TrackingStatus.

        The tracking details events  # noqa: E501

        :param events: The events of this TrackingStatus.  # noqa: E501
        :type: list[TrackingEvent]
        """

        self._events = events

    @property
    def delivered(self):
        """Gets the delivered of this TrackingStatus.  # noqa: E501

        Specified whether the related shipment was delivered  # noqa: E501

        :return: The delivered of this TrackingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._delivered

    @delivered.setter
    def delivered(self, delivered):
        """Sets the delivered of this TrackingStatus.

        Specified whether the related shipment was delivered  # noqa: E501

        :param delivered: The delivered of this TrackingStatus.  # noqa: E501
        :type: bool
        """

        self._delivered = delivered

    @property
    def test_mode(self):
        """Gets the test_mode of this TrackingStatus.  # noqa: E501

        Specified whether the object was created with a carrier in test mode  # noqa: E501

        :return: The test_mode of this TrackingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this TrackingStatus.

        Specified whether the object was created with a carrier in test mode  # noqa: E501

        :param test_mode: The test_mode of this TrackingStatus.  # noqa: E501
        :type: bool
        """
        if test_mode is None:
            raise ValueError("Invalid value for `test_mode`, must not be `None`")  # noqa: E501

        self._test_mode = test_mode

    @property
    def pending(self):
        """Gets the pending of this TrackingStatus.  # noqa: E501

        Specified whether the shipment hasn't been picked up or is in an unknown state  # noqa: E501

        :return: The pending of this TrackingStatus.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this TrackingStatus.

        Specified whether the shipment hasn't been picked up or is in an unknown state  # noqa: E501

        :param pending: The pending of this TrackingStatus.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackingStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackingStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
