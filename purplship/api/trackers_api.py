# coding: utf-8

"""
    Purplship API

     ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.6.2`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.    # noqa: E501

    OpenAPI spec version: 2021.6.2
    Contact: hello@purplship.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from purplship.api_client import ApiClient


class TrackersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create(self, carrier_name, tracking_number, **kwargs):  # noqa: E501
        """Create a shipment tracker  # noqa: E501

        This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(carrier_name, tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str carrier_name: (required)
        :param str tracking_number: (required)
        :param bool test: The test flag indicates whether to use a carrier configured for test.
        :return: TrackingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(carrier_name, tracking_number, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(carrier_name, tracking_number, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, carrier_name, tracking_number, **kwargs):  # noqa: E501
        """Create a shipment tracker  # noqa: E501

        This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(carrier_name, tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str carrier_name: (required)
        :param str tracking_number: (required)
        :param bool test: The test flag indicates whether to use a carrier configured for test.
        :return: TrackingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['carrier_name', 'tracking_number', 'test']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'carrier_name' is set
        if ('carrier_name' not in params or
                params['carrier_name'] is None):
            raise ValueError("Missing the required parameter `carrier_name` when calling `create`")  # noqa: E501
        # verify the required parameter 'tracking_number' is set
        if ('tracking_number' not in params or
                params['tracking_number'] is None):
            raise ValueError("Missing the required parameter `tracking_number` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'carrier_name' in params:
            path_params['carrier_name'] = params['carrier_name']  # noqa: E501
        if 'tracking_number' in params:
            path_params['tracking_number'] = params['tracking_number']  # noqa: E501

        query_params = []
        if 'test' in params:
            query_params.append(('test', params['test']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trackers/{carrier_name}/{tracking_number}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackingStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self, **kwargs):  # noqa: E501
        """List all shipment trackers  # noqa: E501

        Retrieve all shipment trackers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool test_mode:
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: TrackerList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_with_http_info(self, **kwargs):  # noqa: E501
        """List all shipment trackers  # noqa: E501

        Retrieve all shipment trackers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool test_mode:
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :return: TrackerList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['test_mode', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'test_mode' in params:
            query_params.append(('test_mode', params['test_mode']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trackers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackerList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove(self, id_or_tracking_number, **kwargs):  # noqa: E501
        """Discard a shipment tracker  # noqa: E501

        Discard a shipment tracker.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove(id_or_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_tracking_number: (required)
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_with_http_info(id_or_tracking_number, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_with_http_info(id_or_tracking_number, **kwargs)  # noqa: E501
            return data

    def remove_with_http_info(self, id_or_tracking_number, **kwargs):  # noqa: E501
        """Discard a shipment tracker  # noqa: E501

        Discard a shipment tracker.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_with_http_info(id_or_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_tracking_number: (required)
        :return: Operation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_or_tracking_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_or_tracking_number' is set
        if ('id_or_tracking_number' not in params or
                params['id_or_tracking_number'] is None):
            raise ValueError("Missing the required parameter `id_or_tracking_number` when calling `remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_or_tracking_number' in params:
            path_params['id_or_tracking_number'] = params['id_or_tracking_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trackers/{id_or_tracking_number}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Operation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieves(self, id_or_tracking_number, **kwargs):  # noqa: E501
        """Retrieves a shipment tracker  # noqa: E501

        Retrieve a shipment tracker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieves(id_or_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_tracking_number: (required)
        :return: TrackingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieves_with_http_info(id_or_tracking_number, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieves_with_http_info(id_or_tracking_number, **kwargs)  # noqa: E501
            return data

    def retrieves_with_http_info(self, id_or_tracking_number, **kwargs):  # noqa: E501
        """Retrieves a shipment tracker  # noqa: E501

        Retrieve a shipment tracker  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieves_with_http_info(id_or_tracking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id_or_tracking_number: (required)
        :return: TrackingStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_or_tracking_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieves" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id_or_tracking_number' is set
        if ('id_or_tracking_number' not in params or
                params['id_or_tracking_number'] is None):
            raise ValueError("Missing the required parameter `id_or_tracking_number` when calling `retrieves`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id_or_tracking_number' in params:
            path_params['id_or_tracking_number'] = params['id_or_tracking_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Token']  # noqa: E501

        return self.api_client.call_api(
            '/v1/trackers/{id_or_tracking_number}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TrackingStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
