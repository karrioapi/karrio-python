# coding: utf-8

"""
    Purplship API

     ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.6.2`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.    # noqa: E501

    OpenAPI spec version: 2021.6.2
    Contact: hello@purplship.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipmentCancelRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shipment_identifier': 'str',
        'service': 'str',
        'options': 'object'
    }

    attribute_map = {
        'shipment_identifier': 'shipment_identifier',
        'service': 'service',
        'options': 'options'
    }

    def __init__(self, shipment_identifier=None, service=None, options=None):  # noqa: E501
        """ShipmentCancelRequest - a model defined in Swagger"""  # noqa: E501
        self._shipment_identifier = None
        self._service = None
        self._options = None
        self.discriminator = None
        self.shipment_identifier = shipment_identifier
        if service is not None:
            self.service = service
        if options is not None:
            self.options = options

    @property
    def shipment_identifier(self):
        """Gets the shipment_identifier of this ShipmentCancelRequest.  # noqa: E501

        The shipment identifier returned during creation  # noqa: E501

        :return: The shipment_identifier of this ShipmentCancelRequest.  # noqa: E501
        :rtype: str
        """
        return self._shipment_identifier

    @shipment_identifier.setter
    def shipment_identifier(self, shipment_identifier):
        """Sets the shipment_identifier of this ShipmentCancelRequest.

        The shipment identifier returned during creation  # noqa: E501

        :param shipment_identifier: The shipment_identifier of this ShipmentCancelRequest.  # noqa: E501
        :type: str
        """
        if shipment_identifier is None:
            raise ValueError("Invalid value for `shipment_identifier`, must not be `None`")  # noqa: E501

        self._shipment_identifier = shipment_identifier

    @property
    def service(self):
        """Gets the service of this ShipmentCancelRequest.  # noqa: E501

        The selected shipment service  # noqa: E501

        :return: The service of this ShipmentCancelRequest.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ShipmentCancelRequest.

        The selected shipment service  # noqa: E501

        :param service: The service of this ShipmentCancelRequest.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def options(self):
        """Gets the options of this ShipmentCancelRequest.  # noqa: E501

        Advanced carrier specific cancellation options  # noqa: E501

        :return: The options of this ShipmentCancelRequest.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ShipmentCancelRequest.

        Advanced carrier specific cancellation options  # noqa: E501

        :param options: The options of this ShipmentCancelRequest.  # noqa: E501
        :type: object
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentCancelRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentCancelRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
