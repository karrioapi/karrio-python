# coding: utf-8

"""
    Purplship API

     ## API Reference  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services.  The Purplship API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded  request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  The Purplship API differs for every account as we release new versions. These docs are customized to your version of the API.   ## Versioning  When backwards-incompatible changes are made to the API, a new, dated version is released.  The current version is `2021.6.2`.   Read our API changelog and to learn more about backwards compatibility.  As a precaution, use API versioning to check a new API version before committing to an upgrade.   ## Pagination  All top-level API resources have support for bulk fetches via \"list\" API methods. For instance, you can list addresses,  list shipments, and list trackers. These list API methods share a common structure, taking at least these  two parameters: limit, and offset.  Purplship utilizes offset-based pagination via the offset and limit parameters. Both parameters take a number as value (see below) and return objects in reverse chronological order.  The offset parameter returns objects listed after an index.  The limit parameter take a limit on the number of objects to be returned from 1 to 100.   ```json {     \"next\": \"/v1/shipments?limit=25&offset=25\",     \"previous\": \"/v1/shipments?limit=25&offset=25\",     \"results\": [     ] } ```  ## Environments  The Purplship API offer the possibility to create and retrieve certain objects in `test_mode`. In development, it is therefore possible to add carrier connections, get live rates,  buy labels, create trackers and schedule pickups in `test_mode`.    # noqa: E501

    OpenAPI spec version: 2021.6.2
    Contact: hello@purplship.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class References(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'app_version': 'str',
        'countries': 'object',
        'currencies': 'object',
        'carriers': 'object',
        'customs_content_type': 'object',
        'incoterms': 'object',
        'states': 'object',
        'services': 'object',
        'service_names': 'object',
        'options': 'object',
        'option_names': 'object',
        'package_presets': 'object',
        'packaging_types': 'object',
        'payment_types': 'object'
    }

    attribute_map = {
        'app_name': 'APP_NAME',
        'app_version': 'APP_VERSION',
        'countries': 'countries',
        'currencies': 'currencies',
        'carriers': 'carriers',
        'customs_content_type': 'customs_content_type',
        'incoterms': 'incoterms',
        'states': 'states',
        'services': 'services',
        'service_names': 'service_names',
        'options': 'options',
        'option_names': 'option_names',
        'package_presets': 'package_presets',
        'packaging_types': 'packaging_types',
        'payment_types': 'payment_types'
    }

    def __init__(self, app_name=None, app_version=None, countries=None, currencies=None, carriers=None, customs_content_type=None, incoterms=None, states=None, services=None, service_names=None, options=None, option_names=None, package_presets=None, packaging_types=None, payment_types=None):  # noqa: E501
        """References - a model defined in Swagger"""  # noqa: E501
        self._app_name = None
        self._app_version = None
        self._countries = None
        self._currencies = None
        self._carriers = None
        self._customs_content_type = None
        self._incoterms = None
        self._states = None
        self._services = None
        self._service_names = None
        self._options = None
        self._option_names = None
        self._package_presets = None
        self._packaging_types = None
        self._payment_types = None
        self.discriminator = None
        self.app_name = app_name
        self.app_version = app_version
        self.countries = countries
        self.currencies = currencies
        self.carriers = carriers
        self.customs_content_type = customs_content_type
        self.incoterms = incoterms
        self.states = states
        self.services = services
        self.service_names = service_names
        self.options = options
        self.option_names = option_names
        self.package_presets = package_presets
        self.packaging_types = packaging_types
        self.payment_types = payment_types

    @property
    def app_name(self):
        """Gets the app_name of this References.  # noqa: E501


        :return: The app_name of this References.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this References.


        :param app_name: The app_name of this References.  # noqa: E501
        :type: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def app_version(self):
        """Gets the app_version of this References.  # noqa: E501


        :return: The app_version of this References.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this References.


        :param app_version: The app_version of this References.  # noqa: E501
        :type: str
        """
        if app_version is None:
            raise ValueError("Invalid value for `app_version`, must not be `None`")  # noqa: E501

        self._app_version = app_version

    @property
    def countries(self):
        """Gets the countries of this References.  # noqa: E501


        :return: The countries of this References.  # noqa: E501
        :rtype: object
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this References.


        :param countries: The countries of this References.  # noqa: E501
        :type: object
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")  # noqa: E501

        self._countries = countries

    @property
    def currencies(self):
        """Gets the currencies of this References.  # noqa: E501


        :return: The currencies of this References.  # noqa: E501
        :rtype: object
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this References.


        :param currencies: The currencies of this References.  # noqa: E501
        :type: object
        """
        if currencies is None:
            raise ValueError("Invalid value for `currencies`, must not be `None`")  # noqa: E501

        self._currencies = currencies

    @property
    def carriers(self):
        """Gets the carriers of this References.  # noqa: E501


        :return: The carriers of this References.  # noqa: E501
        :rtype: object
        """
        return self._carriers

    @carriers.setter
    def carriers(self, carriers):
        """Sets the carriers of this References.


        :param carriers: The carriers of this References.  # noqa: E501
        :type: object
        """
        if carriers is None:
            raise ValueError("Invalid value for `carriers`, must not be `None`")  # noqa: E501

        self._carriers = carriers

    @property
    def customs_content_type(self):
        """Gets the customs_content_type of this References.  # noqa: E501


        :return: The customs_content_type of this References.  # noqa: E501
        :rtype: object
        """
        return self._customs_content_type

    @customs_content_type.setter
    def customs_content_type(self, customs_content_type):
        """Sets the customs_content_type of this References.


        :param customs_content_type: The customs_content_type of this References.  # noqa: E501
        :type: object
        """
        if customs_content_type is None:
            raise ValueError("Invalid value for `customs_content_type`, must not be `None`")  # noqa: E501

        self._customs_content_type = customs_content_type

    @property
    def incoterms(self):
        """Gets the incoterms of this References.  # noqa: E501


        :return: The incoterms of this References.  # noqa: E501
        :rtype: object
        """
        return self._incoterms

    @incoterms.setter
    def incoterms(self, incoterms):
        """Sets the incoterms of this References.


        :param incoterms: The incoterms of this References.  # noqa: E501
        :type: object
        """
        if incoterms is None:
            raise ValueError("Invalid value for `incoterms`, must not be `None`")  # noqa: E501

        self._incoterms = incoterms

    @property
    def states(self):
        """Gets the states of this References.  # noqa: E501


        :return: The states of this References.  # noqa: E501
        :rtype: object
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this References.


        :param states: The states of this References.  # noqa: E501
        :type: object
        """
        if states is None:
            raise ValueError("Invalid value for `states`, must not be `None`")  # noqa: E501

        self._states = states

    @property
    def services(self):
        """Gets the services of this References.  # noqa: E501


        :return: The services of this References.  # noqa: E501
        :rtype: object
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this References.


        :param services: The services of this References.  # noqa: E501
        :type: object
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")  # noqa: E501

        self._services = services

    @property
    def service_names(self):
        """Gets the service_names of this References.  # noqa: E501


        :return: The service_names of this References.  # noqa: E501
        :rtype: object
        """
        return self._service_names

    @service_names.setter
    def service_names(self, service_names):
        """Sets the service_names of this References.


        :param service_names: The service_names of this References.  # noqa: E501
        :type: object
        """
        if service_names is None:
            raise ValueError("Invalid value for `service_names`, must not be `None`")  # noqa: E501

        self._service_names = service_names

    @property
    def options(self):
        """Gets the options of this References.  # noqa: E501


        :return: The options of this References.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this References.


        :param options: The options of this References.  # noqa: E501
        :type: object
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def option_names(self):
        """Gets the option_names of this References.  # noqa: E501


        :return: The option_names of this References.  # noqa: E501
        :rtype: object
        """
        return self._option_names

    @option_names.setter
    def option_names(self, option_names):
        """Sets the option_names of this References.


        :param option_names: The option_names of this References.  # noqa: E501
        :type: object
        """
        if option_names is None:
            raise ValueError("Invalid value for `option_names`, must not be `None`")  # noqa: E501

        self._option_names = option_names

    @property
    def package_presets(self):
        """Gets the package_presets of this References.  # noqa: E501


        :return: The package_presets of this References.  # noqa: E501
        :rtype: object
        """
        return self._package_presets

    @package_presets.setter
    def package_presets(self, package_presets):
        """Sets the package_presets of this References.


        :param package_presets: The package_presets of this References.  # noqa: E501
        :type: object
        """
        if package_presets is None:
            raise ValueError("Invalid value for `package_presets`, must not be `None`")  # noqa: E501

        self._package_presets = package_presets

    @property
    def packaging_types(self):
        """Gets the packaging_types of this References.  # noqa: E501


        :return: The packaging_types of this References.  # noqa: E501
        :rtype: object
        """
        return self._packaging_types

    @packaging_types.setter
    def packaging_types(self, packaging_types):
        """Sets the packaging_types of this References.


        :param packaging_types: The packaging_types of this References.  # noqa: E501
        :type: object
        """
        if packaging_types is None:
            raise ValueError("Invalid value for `packaging_types`, must not be `None`")  # noqa: E501

        self._packaging_types = packaging_types

    @property
    def payment_types(self):
        """Gets the payment_types of this References.  # noqa: E501


        :return: The payment_types of this References.  # noqa: E501
        :rtype: object
        """
        return self._payment_types

    @payment_types.setter
    def payment_types(self, payment_types):
        """Sets the payment_types of this References.


        :param payment_types: The payment_types of this References.  # noqa: E501
        :type: object
        """
        if payment_types is None:
            raise ValueError("Invalid value for `payment_types`, must not be `None`")  # noqa: E501

        self._payment_types = payment_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(References, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, References):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
